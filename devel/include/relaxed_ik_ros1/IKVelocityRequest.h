// Generated by gencpp from file relaxed_ik_ros1/IKVelocityRequest.msg
// DO NOT EDIT!


#ifndef RELAXED_IK_ROS1_MESSAGE_IKVELOCITYREQUEST_H
#define RELAXED_IK_ROS1_MESSAGE_IKVELOCITYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>

namespace relaxed_ik_ros1
{
template <class ContainerAllocator>
struct IKVelocityRequest_
{
  typedef IKVelocityRequest_<ContainerAllocator> Type;

  IKVelocityRequest_()
    : ee_vels()
    , tolerances()  {
    }
  IKVelocityRequest_(const ContainerAllocator& _alloc)
    : ee_vels(_alloc)
    , tolerances(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Twist_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Twist_<ContainerAllocator> >> _ee_vels_type;
  _ee_vels_type ee_vels;

   typedef std::vector< ::geometry_msgs::Twist_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Twist_<ContainerAllocator> >> _tolerances_type;
  _tolerances_type tolerances;





  typedef boost::shared_ptr< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IKVelocityRequest_

typedef ::relaxed_ik_ros1::IKVelocityRequest_<std::allocator<void> > IKVelocityRequest;

typedef boost::shared_ptr< ::relaxed_ik_ros1::IKVelocityRequest > IKVelocityRequestPtr;
typedef boost::shared_ptr< ::relaxed_ik_ros1::IKVelocityRequest const> IKVelocityRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator1> & lhs, const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ee_vels == rhs.ee_vels &&
    lhs.tolerances == rhs.tolerances;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator1> & lhs, const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace relaxed_ik_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a8ee2d00e444eb31e9002a3034078af";
  }

  static const char* value(const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a8ee2d00e444eb3ULL;
  static const uint64_t static_value2 = 0x1e9002a3034078afULL;
};

template<class ContainerAllocator>
struct DataType< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "relaxed_ik_ros1/IKVelocityRequest";
  }

  static const char* value(const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Twist[] ee_vels\n"
"geometry_msgs/Twist[] tolerances\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ee_vels);
      stream.next(m.tolerances);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IKVelocityRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::relaxed_ik_ros1::IKVelocityRequest_<ContainerAllocator>& v)
  {
    s << indent << "ee_vels[]" << std::endl;
    for (size_t i = 0; i < v.ee_vels.size(); ++i)
    {
      s << indent << "  ee_vels[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "    ", v.ee_vels[i]);
    }
    s << indent << "tolerances[]" << std::endl;
    for (size_t i = 0; i < v.tolerances.size(); ++i)
    {
      s << indent << "  tolerances[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "    ", v.tolerances[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RELAXED_IK_ROS1_MESSAGE_IKVELOCITYREQUEST_H
